name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  unit_test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install ffmpeg
        uses: AnimMouse/setup-ffmpeg@v1
        with:
          version: 7.1

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test --all-features
        env:
          RUST_BACKTRACE: "full"

  build:
    name: Build for ${{ matrix.os }}
    needs: unit_test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: audio2tonie-linux
          - os: windows-latest
            artifact_name: audio2tonie-windows
          - os: macos-latest
            artifact_name: audio2tonie-macos

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install Homebrew
        if: matrix.os == 'macos-latest'
        uses:  Homebrew/actions/setup-homebrew@master

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build (Windows/Linux)
        if: matrix.os != 'macos-latest'
        run: cargo build --release
      
      - name: Build (MacOS)
        if: matrix.os == 'macos-latest'
        run: |
            brew install opus protobuf
            cargo build --release

      - name: Prepare artifacts (Linux/macOS)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
            mv target/release/audio2tonie audio2tonie
            zip -j ${{ matrix.artifact_name }}.zip audio2tonie

      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
            Move-Item -Path "target/release/audio2tonie.exe" -Destination "audio2tonie.exe"
            Compress-Archive -Path "audio2tonie.exe" -DestinationPath "${{ matrix.artifact_name }}.zip" -Force

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.zip

  test:
    name: Test Linux Binary
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libopus0

      - name: Test Linux binary
        shell: bash
        run: |
          unzip artifacts/audio2tonie-linux/audio2tonie-linux.zip
          chmod +x audio2tonie
          ./audio2tonie --help

  release:
    name: Create Release
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: echo "VERSION=$(cargo metadata --format-version=1 | jq -r '.packages[0].version')" >> $GITHUB_OUTPUT

      - name: Create tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${{ steps.get_version.outputs.VERSION }}" -m "Release v${{ steps.get_version.outputs.VERSION }}"
          git push origin "v${{ steps.get_version.outputs.VERSION }}"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.VERSION }}
          files: |
            artifacts/audio2tonie-linux/audio2tonie-linux.zip
            artifacts/audio2tonie-windows/audio2tonie-windows.zip
            artifacts/audio2tonie-macos/audio2tonie-macos.zip
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 